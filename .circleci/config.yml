version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.0
  helm: circleci/helm@1.2.0
  snyk: snyk/snyk@1.1.2
  aws-cli: circleci/aws-cli@4.0.0 # use v4 of this orb
  aws-ecr: circleci/aws-ecr@8.2.1 # this orb doesn't support OIDC v2, so we use aws-cli to authenticate

_snyk_options: &snyk_options
  project: "${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}"
  organization: "legal-aid-agency"
  severity-threshold: "critical"
  fail-on-issues: true
  monitor-on-build: false
  token-variable: SNYK_TOKEN
  additional-arguments: --policy-path=.snyk

# ------------------
# EXECUTORS
# ------------------
executors:
  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools

  test-executor:
    docker:
      - image: cimg/openjdk:17.0.8
        environment:
          # Configure the JVM and Gradle to avoid OOM errors
          _JAVA_OPTIONS: "-Xmx3g"
          GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"

# ------------------
# COMMANDS
# ------------------
commands:
  deploy-to:
    description: >
      Deploy image to the specified environment
    parameters:
      environment:
        description: Destination environment
        type: string
      token:
        description: CircleCI Service account token
        type: string
    steps:
      - checkout
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=<< parameters.token >>
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=cfe-crime-<< parameters.environment >>
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=cfe-crime-<< parameters.environment >> get pods
      - helm/upgrade-helm-chart:
          namespace: cfe-crime-<< parameters.environment >>
          update-repositories: false
          chart: ./deploy/helm/
          release-name: cfe-crime
          values: ./deploy/helm/values/<< parameters.environment >>.yaml
          values-to-override: image.tag=${CIRCLE_SHA1},image.repository=$AWS_ECR_ACCOUNT_URL/laa-eligibility-platform/cfe-crime-ecr

# ------------------
# JOBS
# ------------------
jobs:
  build:
    executor: test-executor
    steps:
      - checkout
      - restore_cache:
          key: v2-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v2-gradle-cache-{{ checksum "build.gradle.kts" }}
      - run:
          name: Install Dependencies
          command: ./gradlew build -x test
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v2-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v2-gradle-cache-{{ checksum "build.gradle.kts" }}
      - persist_to_workspace:
          root: .
          paths:
            - build

  scan_app:
    docker:
      - image: cimg/openjdk:17.0.8
    steps:
      - checkout
      - attach_workspace:
          at: .
      - snyk/scan:
          <<: *snyk_options

  test_and_assemble:
    executor: test-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: v2-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v2-gradle-cache-{{ checksum "build.gradle.kts" }}
      - run:
          name: Run build test
          command: ./gradlew clean build --debug --no-build-cache --daemon
      - store_test_results:
          # view test in CircleCI
          path: build/test-results
      #test (execution , jacoco, etc) saved
      - store_artifacts:
          path: build/reports/jacoco/test
          destination: test_result
      - store_artifacts:
          path: build/reports/jacoco
          destination: test_coverage
      - store_artifacts:
          path: build/reports
          destination: reports
      - run:
          name: Assemble JAR
          command: ./gradlew assemble
      - store_artifacts:
          path: build/libs

  build_and_scan_image:
    executor: aws-ecr/default
    steps:
      - checkout
      - attach_workspace:
            at: .
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      # Build and push your Docker image
      - aws-ecr/build-image:
          push-image: false
          tag: ${CIRCLE_SHA1}
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var
      - snyk/scan:
          docker-image-name: ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com/$ECR_REPOSITORY:${CIRCLE_SHA1}
          <<: *snyk_options

  build_and_push_image:
    executor: aws-ecr/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      # Authenticate to AWS using OIDC v2 with the AWS CLI
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      # Authenticate to the ECR repository using the standard command
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      # Build and push your Docker image
      - aws-ecr/build-image:
          push-image: true
          tag: ${CIRCLE_SHA1}
          region: $ECR_REGION # this will use the env var
          repo: $ECR_REPOSITORY # this will use the env var

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: dev
          token: ${CIRCLE_CI_TOKEN_DEV}

# ------------------
# WORKFLOWS
# ------------------
workflows:
  version: 2

  build-deploy-master:
    jobs:
      - build:
          filters:
            branches:
              only:
                - main

      - scan_app:
          requires:
            - build

      - test_and_assemble:
          requires:
            - build

      - build_and_push_image:
          context: cfe-crime-dev
          requires:
            - scan_app
            - test_and_assemble

      - deploy-dev:
          requires:
            - build_and_push_image

  build-deploy-branch:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - main

      - scan_app:
          requires:
            - build

      - test_and_assemble:
          requires:
            - build

      - build_and_push_image:
          context: cfe-crime-dev
          requires:
            - scan_app
            - test_and_assemble

      - deploy-dev:
          requires:
            - build_and_push_image
